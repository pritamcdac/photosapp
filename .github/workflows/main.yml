name: Mobile CI/CD

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  # android:
  #   name: Android Release
  #   runs-on: ubuntu-latest

  #   steps:
  #     - uses: actions/checkout@v4

  #     - name: Setup JDK 17
  #       uses: actions/setup-java@v4
  #       with:
  #         distribution: 'temurin'
  #         java-version: 17

  #     - name: Setup Node
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version: '18'

  #     - name: Install JS deps
  #       run: npm install

  #     # 🔑 Decode keystore
  #     - name: Decode Keystore
  #       run: echo "${{ secrets.ANDROID_KEYSTORE_BASE64 }}" | base64 --decode > android/app/upload-keystore.jks

  #     # 🔑 Configure Gradle signing
  #     - name: Configure Gradle signing
  #       working-directory: android
  #       run: |
  #         echo "MYAPP_UPLOAD_STORE_FILE=upload-keystore.jks" >> gradle.properties
  #         echo "MYAPP_UPLOAD_STORE_PASSWORD=${{ secrets.ANDROID_KEYSTORE_PASSWORD }}" >> gradle.properties
  #         echo "MYAPP_UPLOAD_KEY_ALIAS=${{ secrets.ANDROID_KEY_ALIAS }}" >> gradle.properties
  #         echo "MYAPP_UPLOAD_KEY_PASSWORD=${{ secrets.ANDROID_KEY_ALIAS_PASSWORD }}" >> gradle.properties
  #         cat gradle.properties

  #     - name: Make gradlew executable
  #       working-directory: android
  #       run: chmod +x gradlew
     
  #     - name: Build AAB
  #       run: cd android && ./gradlew bundleRelease --stacktrace

  #     - name: Upload to Play Console
  #       uses: r0adkll/upload-google-play@v1
  #       with:
  #         serviceAccountJsonPlainText: ${{ secrets.PLAY_SERVICE_ACCOUNT_JSON }}
  #         packageName: com.cybage.photosapp
  #         releaseFiles: android/app/build/outputs/bundle/release/app-release.aab
  #         track: internal
  #         status: draft


  ios:
    name: iOS Build & Upload
    runs-on: macos-14
    # needs: android

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Select Xcode version
        uses: maxim-lobanov/setup-xcode@v1
        with:
           xcode-version: '16.1'
     
      - name: 📦 Install JS dependencies
        run: npm install
     
      # - name: 📦 Set up CocoaPods and build
      #   run: |
      #    cd ios
      #    rm -rf Pods Podfile.lock
      #    pod install

      # - name: Install Dependencies
      #   run: |
      #     cd ios
      #     pod install --repo-update

      # - name: Decode Provisioning Profile
      #   run: |
      #     mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
      #     echo "${{ secrets.PROVISIONING_PROFILE }}" | base64 --decode > ~/Library/MobileDevice/Provisioning\ Profiles/CybageCI.mobileprovision
      
      # - name: 🔍 List schemes
      #   run: xcodebuild -list -workspace ios/PhotosApp.xcworkspace
 
      # - name: 📃 Install provisioning profile
      #   run: |
      #     mkdir -p "$HOME/Library/MobileDevice/Provisioning Profiles"
      #     echo "${{ secrets.IOS_PROVISIONING_PROFILE }}" | base64 --decode > "$HOME/Library/MobileDevice/Provisioning Profiles/CybageCI.mobileprovision"


      # - name: 🔍 List code‑signing identities (debug)
      #   run: security find-identity -v -p codesigning



      # - name: 📝 Generate ExportOptions.plist
      #   run: |
      #     cat > ios/ExportOptions.plist <<'EOF'
      #     <?xml version="1.0" encoding="UTF-8"?>
      #     <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
      #     <plist version="1.0">
      #       <dict>
      #         <key>method</key>
      #         <string>app-store</string>
      #         <key>teamID</key>
      #         <string>VB78Y67GX6</string>
      #         <key>provisioningProfiles</key>
      #         <dict>
      #           <key>com.cybage.alm</key>
      #           <string>CybageCI</string>
      #         </dict>
      #         <key>signingStyle</key>
      #         <string>manual</string>
      #         <key>stripSwiftSymbols</key>
      #         <true/>
      #         <key>compileBitcode</key>
      #         <true/>
      #         <key>destination</key>
      #         <string>export</string>
      #       </dict>
      #     </plist>
      #     EOF

      - name: 🔑 Decode and import iOS certificate
        run: |
          echo "${{ secrets.IOS_CERTIFICATE }}" | base64 --decode > /tmp/certificate.p12
          security create-keychain -p "password" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "password" build.keychain
          security set-keychain-settings -lut 21600 build.keychain
          security import /tmp/certificate.p12 -k build.keychain -P "${{ secrets.IOS_CERTIFICATE_PASSWORD }}" -T /usr/bin/codesign -A
          security list-keychains -s build.keychain login.keychain
          security set-key-partition-list -S apple-tool:,apple: -s -k "password" build.keychain
          
      - name: 📃 Install provisioning profile
        run: |
          mkdir -p "$HOME/Library/MobileDevice/Provisioning Profiles"
          echo "${{ secrets.IOS_PROVISIONING_PROFILE }}" | base64 --decode > "$HOME/Library/MobileDevice/Provisioning Profiles/CybageCI.mobileprovision"

      - name: 🔍 List code‑signing identities (debug)
        run: security find-identity -v -p codesigning

      - name: 📝 Generate ExportOptions.plist
        run: |
          cat > ios/ExportOptions.plist <<'EOF'
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
            <dict>
              <key>method</key>
              <string>app-store</string>
              <key>teamID</key>
              <string>VB78Y67GX6</string>
              <key>provisioningProfiles</key>
              <dict>
                <key>com.cybage.alm</key>
                <string>CybageCI</string>
              </dict>
              <key>signingStyle</key>
              <string>manual</string>
              <key>stripSwiftSymbols</key>
              <true/>
              <key>compileBitcode</key>
              <true/>
              <key>destination</key>
              <string>export</string>
            </dict>
          </plist>
          EOF
     
      - name: 📦 Set up CocoaPods and build
        run: |
               cd ios
               rm -rf Pods Podfile.lock
               pod install


      - name: 📦 Archive iOS app
        run: |
         xcodebuild \
         -workspace ios/PhotosApp.xcworkspace \
         -scheme PhotosApp \
         -configuration Release \
         -archivePath $PWD/build/PhotosApp.xcarchive \
         -destination "generic/platform=iOS" \
         CODE_SIGN_STYLE=Manual \
         DEVELOPMENT_TEAM=VB78Y67GX6 \
         PROVISIONING_PROFILE_SPECIFIER=CybageCI \
         CODE_SIGN_IDENTITY="Apple Distribution: CYBAGE SOFTWARE, INC. (VB78Y67GX6)" \
         OTHER_CODE_SIGN_FLAGS="--keychain /Users/runner/Library/Keychains/login.keychain-db" \
         archive

         # xcodebuild -workspace ios/PhotosApp.xcworkspace \
         # -scheme PhotosApp \
         # -configuration Release \
         # -sdk iphoneos \
         # -archivePath $PWD/build/PhotosApp.xcarchive archive \
         #  CODE_SIGN_STYLE=Manual \
         #  DEVELOPMENT_TEAM=VB78Y67GX6 \
         # PROVISIONING_PROFILE_SPECIFIER="CybageCI" \
         # CODE_SIGN_IDENTITY="Apple Distribution"

      - name: Export IPA
        run: |
          xcodebuild -exportArchive \
            -archivePath $PWD/build/PhotosApp.xcarchive \
            -exportOptionsPlist ios/ExportOptions.plist \
            -exportPath $PWD/build

      - name: Upload to TestFlight
        uses: apple-actions/upload-testflight-build@v1
        with:
          app-path: build/PhotosApp.ipa
          issuer-id: ${{ secrets.APP_STORE_CONNECT_ISSUER_ID }}
          api-key-id: ${{ secrets.APP_STORE_CONNECT_KEY_ID }}
          api-private-key: ${{ secrets.APP_STORE_CONNECT_API_KEY }}
